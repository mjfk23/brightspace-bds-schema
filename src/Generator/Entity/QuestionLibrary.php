<?php

declare(strict_types=1);

namespace Brightspace\Bds\Schema\Generator\Entity;

use Brightspace\Bds\Schema\Generator\Repository\QuestionLibraryRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\ORM\Mapping\UniqueConstraint;

/**
 * The Question Library Brightspace Data Set details all the questions that have been created in the organization. This
 * includes quiz questions that are not currently used in a quiz.
 *
 * @see https://community.d2l.com/brightspace/kb/articles/4531-questions-data-sets#question-library
 */
#[ORM\Entity(repositoryClass: QuestionLibraryRepository::class)]
#[ORM\Table(name: 'D2L_QUESTION_LIBRARY')]
#[UniqueConstraint(name: 'D2L_QUESTION_LIBRARY_PUK', columns: ['QuestionId', 'QuestionVersionId'])]
final class QuestionLibrary
{
    #[ORM\Id]
    #[ORM\Column(name: 'BDSRecordId', type: Types::STRING, length: 48)]
    private ?string $bdsRecordId = null;

    /**
     * Unique question identifier
     */
    #[ORM\Column(name: 'QuestionId', type: Types::BIGINT, precision: 20, nullable: false)]
    private ?string $questionId = null;

    /**
     * Unique question version identifier. Each time you edit a quiz, survey, or self-assessment question, a new version
     * of that question is created, indicated by the QuestionVersionID field.
     */
    #[ORM\Column(name: 'QuestionVersionId', type: Types::BIGINT, precision: 20, nullable: false)]
    private ?string $questionVersionId = null;

    /**
     * Indicates if the question is automatically graded.
     */
    #[ORM\Column(name: 'IsAutoGraded', nullable: true)]
    private ?bool $isAutoGraded = null;

    /**
     * Unique identifier of the template used to create this question. Field can be null.
     */
    #[ORM\Column(name: 'TemplateTypeId', precision: 10, nullable: true)]
    private ?int $templateTypeId = null;

    /**
     * Type of question. Field can be null.
     */
    #[ORM\Column(name: 'QuestionType', length: 56, nullable: true)]
    private ?string $questionType = null;

    /**
     * Question name. Field can be null.
     */
    #[ORM\Column(name: 'Name', length: 512, nullable: true)]
    private ?string $name = null;

    /**
     * Body of the question. Field can be null.
     */
    #[ORM\Column(name: 'Question', length: 2000, nullable: true)]
    private ?string $question = null;

    /**
     * Comment associated with the question. Field can be null. When you add a question to a quiz, the Overall Question
     * Feedback field provides feedback comments during the grading process. The information captured in this field is
     * the Comment field.
     */
    #[ORM\Column(name: 'Comment', length: 2000, nullable: true)]
    private ?string $comment = null;

    /**
     * Answer key for the question. This only applies to Written Response Questions. Field can be null.
     */
    #[ORM\Column(name: 'AnswerKey', length: 2000, nullable: true)]
    private ?string $answerKey = null;

    /**
     * Date the question was created (UTC)
     */
    #[ORM\Column(name: 'CreationDate', type: Types::DATETIMETZ_IMMUTABLE, nullable: true)]
    private ?\DateTimeImmutable $creationDate = null;

    /**
     * Indicates the version of the row. This information is used to determine which table row occurred first, similar
     * to the way time stamps function in other data sets.
     */
    #[ORM\Column(name: 'Version', type: Types::BIGINT, precision: 20, nullable: true)]
    private ?string $version = null;

    /**
     * Indicates if attachments are allowed in this question. Field can be null.
     */
    #[ORM\Column(name: 'AllowsAttachments', nullable: true)]
    private ?bool $allowsAttachments = null;

    /**
     * Indicates whether D2L Lumi (Brightspace AI) capabilities were used and the level of AI involvement. Possible
     * values: 0 - No AI capabilities were involved. 1 - Generated by AI and reviewed by a human. 2 - Generated by AI
     * and edited by a human. 3 - Assisted or uplifted by AI.
     */
    #[ORM\Column(name: 'AIUtilization', precision: 10, nullable: true)]
    private ?int $aIUtilization = null;

    public function getBDSRecordId(): ?string
    {
        return $this->bdsRecordId;
    }

    public function getQuestionId(): ?string
    {
        return $this->questionId;
    }

    public function setQuestionId(string $questionId): static
    {
        $this->questionId = $questionId;

        return $this;
    }

    public function getQuestionVersionId(): ?string
    {
        return $this->questionVersionId;
    }

    public function setQuestionVersionId(string $questionVersionId): static
    {
        $this->questionVersionId = $questionVersionId;

        return $this;
    }

    public function isAutoGraded(): ?bool
    {
        return $this->isAutoGraded;
    }

    public function setAutoGraded(?bool $isAutoGraded): static
    {
        $this->isAutoGraded = $isAutoGraded;

        return $this;
    }

    public function getTemplateTypeId(): ?int
    {
        return $this->templateTypeId;
    }

    public function setTemplateTypeId(?int $templateTypeId): static
    {
        $this->templateTypeId = $templateTypeId;

        return $this;
    }

    public function getQuestionType(): ?string
    {
        return $this->questionType;
    }

    public function setQuestionType(?string $questionType): static
    {
        $this->questionType = $questionType;

        return $this;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(?string $name): static
    {
        $this->name = $name;

        return $this;
    }

    public function getQuestion(): ?string
    {
        return $this->question;
    }

    public function setQuestion(?string $question): static
    {
        $this->question = $question;

        return $this;
    }

    public function getComment(): ?string
    {
        return $this->comment;
    }

    public function setComment(?string $comment): static
    {
        $this->comment = $comment;

        return $this;
    }

    public function getAnswerKey(): ?string
    {
        return $this->answerKey;
    }

    public function setAnswerKey(?string $answerKey): static
    {
        $this->answerKey = $answerKey;

        return $this;
    }

    public function getCreationDate(): ?\DateTimeImmutable
    {
        return $this->creationDate;
    }

    public function setCreationDate(?\DateTimeImmutable $creationDate): static
    {
        $this->creationDate = $creationDate;

        return $this;
    }

    public function getVersion(): ?string
    {
        return $this->version;
    }

    public function setVersion(?string $version): static
    {
        $this->version = $version;

        return $this;
    }

    public function isAllowsAttachments(): ?bool
    {
        return $this->allowsAttachments;
    }

    public function setAllowsAttachments(?bool $allowsAttachments): static
    {
        $this->allowsAttachments = $allowsAttachments;

        return $this;
    }

    public function getAIUtilization(): ?int
    {
        return $this->aIUtilization;
    }

    public function setAIUtilization(?int $aIUtilization): static
    {
        $this->aIUtilization = $aIUtilization;

        return $this;
    }
}
